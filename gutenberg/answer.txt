※これは解答用テキストファイルです。

■gutenberg.csvから"STAY HUNGRY, STAY FOOLISH"という活字を取り出してください。
答えは活字のある場所番号を(縦番号,横番号)で書いてください。
記入例)
1,4
2,1
1,6
5,2
5,4
2,2
3,4
4,5
5,1
4,3
1,1
2,5
6,1
2,4
6,6

あなたの答え)
3,3
1,2
1,3
1,15
9,3
3,10
5,12
3,7
1,8
5,8
1,20
13,2
9,12
7,17
3,2
1,12
5,20
11,19
3,6
1,5
3,8
1,10
1,16
15,8
13,19



■あなたが書いたコードの内容や工夫した点を簡潔に書いてください。こちらも評価対象です。
[コードの内容]
	活字のリストをDictionaryで作成し、活字の位置をリストから探すようにしました。

[工夫した点]
	・探索する前にハッシュテーブル(Dictionary)で活字のリストを作成して
	　探索が簡単にできるようにしました。
　　
■あなたが書いたC#のバージョンを教えてください。
4.5


■あなたが書いたコードそのものを貼り付けてください。適宜コメントもコードにつけてください。
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    class Program
    {
        /// <summary>
        /// 活字辞書
        /// </summary>
        static Dictionary<string, Queue<string>> dict = new Dictionary<string, Queue<string>>();

        static void Main(string[] args)
        {
            CreateDict();
            var wordList = GetWordList("STAY HUNGRY, STAY FOOLISH");
            if (wordList != null)
            {
                Console.WriteLine(wordList);
            }
            return;
        }

        /// <summary>
        /// 活字辞書から活字の位置を取り出す
        /// </summary>
        /// <param name="sentence">印刷する文章</param>
        /// <returns></returns>
        static string GetWordList(string sentence)
        {
            string wordList = "";
            var charList = sentence.ToCharArray();

            foreach (var word in charList)
            {
                // 活字を見つけたら、活字辞書からボックスの位置を取り出す。
                // 探している途中で辞書内に活字が存在しない場合はnullを返して処理終了とする。
                if (dict[word.ToString()].Count != 0)
                {
                    wordList += string.Format("{0}\n", dict[word.ToString()].Dequeue());
                }
                else
                {
                    return null;
                }
            }
            return wordList;
        }

        /// <summary>
        /// 活字の辞書を作成する
        /// </summary>
        static void CreateDict()
        {
            // ファイルの読み込み
            var lines = System.IO.File.ReadLines("gutenberg.csv").ToArray();
            //活字辞書の作成
            for (var y = 0; y < lines.Count(); y++)
            {
                // 正規表現で「""」で括られてる文字をリストで取り出す
                Regex regex = new Regex("\".\"");
                var charList = regex.Matches(lines[y]);
                for (var x = 0; x < charList.Count; x++)
                {
                    if (dict.ContainsKey(charList[x].Value.Replace("\"", "")))
                    {
                        dict[charList[x].Value.Replace("\"", "")].Enqueue((y + 1) + "," + (x + 1));
                    }
                    else
                    {
                        dict.Add(charList[x].Value.Replace("\"", ""), new Queue<string>(new string[] { (y + 1) + "," + (x + 1) }));
                    }
                }
                y++;
            }
        }
    }
}



